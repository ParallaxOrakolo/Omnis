scalar JSON
scalar Decimal
scalar Upload

schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Mutation {
  createNodeSheet(
    _id: ID!
    name: String
    sketchName: String
    saved: Boolean
    duplicated: Boolean
    content: JSON!
  ): NodeSheetResult!

  saveNodeSheet(
    _id: ID!
    name: String
    sketchName: String
    saved: Boolean
    duplicated: Boolean
    content: JSON!
  ): NodeSheetResult!

  updateNodeSheet(_id: ID!, name: String, content: JSON): NodeSheetResult
  deleteNodeSheet(id: ID!): NodeSheetResult

  startProcess: ProcessResult
  stopProcess: ProcessResult
  resumeProcess: ProcessResult
  pauseProcess: ProcessResult

  loadConfig(_id: ID!): Boolean!
  getLoadedConfig: ID!

  createAlert(input: AlertInput!): AlertResult!

  uploadFile(file: Upload!): FileResult!
  uploadPhoto(photo: Upload!): Photo!
  takePhoto(camera_id: ID!): Photo!

  createCamera(input: CameraInput!): CameraResult!
  startCamera(_id: ID!): CameraResult!
  stopCamera(_id: ID!): CameraResult!
  resetCamera(_id: ID!): CameraResult!

  createSerial(input: JSON): SerialResult!
  startSerial(_id: ID!): SerialResult!
  stopSerial(_id: ID!): SerialResult!
  resetSerial(_id: ID!): SerialResult!
  sendSerial(_id: ID!, payload: String!): SerialResult!
  setCameraProperty(_id: ID!, input: JSON): CameraResult!

  syncHostTime(timestamp: Int): Boolean!
}

type Query {
  getNodeSheet(_id: ID!): NodeSheetResult!
  getSketchList: SketchListResult!

  getNodeInfo(node_type: ID!, kwargs: JSON): NodeInfoResult!

  getCamera(_id: ID!): CameraResult!
  getCameras: CamerasResult!

  getSerial(_id: ID!): SerialResult!
  getSerials: SerialsResult!

  getProcess: ProcessResult

  updateAlerts: DefaultStatus
  allPhotos: [Photo]

  getManutention: ManutentionResult
  getThr: [String]

  calibrateCamera(input: CalibrateRequestInput!): Boolean
  getLoadedNodes: [Node_Status]
}

type Subscription {
  alerts: AlertResult
  cameras: Camera
  serials: Serial
  calibrations: StepResult
  nodes: Node_Status
}
