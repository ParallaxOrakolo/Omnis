type NodeSheet {
  _id: ID
  parent_id: ID
  label: String
  key: ID
  description: String
  author: String
  version: Int
  last_access: Float
  saved: Boolean
  duplicated:Boolean
  content: JSON
  node_qtd: Int
}

type NDS {
  connections: [connection]
  nodes: [node]
  panning: JSON
  scaling: Float
}

type Macro{
  _id:ID,
  name:String,
  command:String,
  icon:String,
  visible:Boolean
}
type Camera{
  _id: ID
  src: Int
  name: String
  properties: JSON
  running: Boolean
}

type Serial {
  _id: ID
  port: String
  name: String
  baudrate: Int
  is_open: Boolean
  is_gcode: Boolean
  last_value_send: String
  last_value_received: [String]
  date: timestamptz
}

type connection {
  id: String!
  from: String!
  to: String!
}

type node {
  id: String!
  name: String!
  type: String!
  options: [option]
  state: JSON
  interfaces: [interface]
  position: JSON
  width: Int
  twoColumn: Boolean
}

type option {
  name: String!
  value: JSON
}

type interface {
  name: String!
  id: String!
  value: JSON!
}

type Process {
  _id: ID!
  start_at: Float!
  end_at: Float!
  running_seconds: Float!
  status: String!
  error: String
}

type Photo {
    filename: String!
    path: String!
  }

type DefaultStatus{
  status: Boolean
  error: [String]
}

type NodeInfo{
  _id: ID
  name: String
  type: String
  options: JSON
}
type Manutention{
  proto: String
  url: String
  port: String
}

type Node_Status{
  name: String
  type: String
  id: ID
  info: node_status_info
}

type node_status_info{
  status: String!
  message: target_message
}

type target_message{
  from: ID
  to: ID
}

type control_status{
  jog_position: JSON
  endstops: JSON
}

type user {
    _id: ID
    username: String
    avatar_image: String
    email: String
    last_name: String
    first_name: String
    level: String
    last_access: timestamptz
  }

type user_with_token{
  user: user
  token: String
}